#!/usr/bin/env python3

import argparse
from pathlib import Path
from git import Repo
import shutil
import sys


class config:
    def __init__(self, name, os_specifc, repo_path, local_path):
        self.name = name
        self.os_specifc = os_specifc
        self.repo_path = Path.joinpath(Path.cwd(), repo_path)
        self.local_path = Path.joinpath(Path.home(), local_path)

        if self.os_specifc:
            self.repo_path = self.repo_path.with_suffix("." + sys.platform)

    def exists(self):
        return self.local_path.is_file()

    def copy_local(self):
        shutil.copy(self.linux_path, self.repo_path)

    def copy_remote(self):
        shutil.copy(self.repo_path, self.local_path)

configs = []
configs.append(config("zsh", True, "zshrc", ".zshrc"))
configs.append(config("vim", False, "vim/vimrc", ".vim/vimrc"))
configs.append(config("nvim", False, "vim/init.vim", ".config/nvim/init.vim"))


def dump_paths():
    for conf in configs:
        print("================")
        print("Name : {}".format(conf.name))
        print("local : {}".format(str(conf.local_path)))
        print("repo : {}".format(str(conf.repo_path)))
        print("================")
        print()


def main():
    parser = argparse.ArgumentParser(description='A tutorial of argparse!')
    parser.add_argument(
            "--mode",
            choices=["local", "remote"],
            default="local",
            type=str,
            help="update configs from local or remote")

    parser.add_argument(
            "--debug",
            action="store_true",
            help="Enable debug mode"
            )

    parser.add_argument(
        "--dry",
        action="store_true",
        help="Dont push anything"
    )

    parser.add_argument(
        "--commit",
        action="store_true",
        help="Commit to the repo"
    )

    args = parser.parse_args()
    mode = args.mode
    debug = args.debug

    if debug:
        print("Debug mode enabled")
        dump_paths()

    if mode == "local":
        local(args.dry, args.commit)
    elif mode == "remote":
        remote()
    else:
        print("No mode selected, should never happen")


def local(dry, commit):
    print("We want to update from local configs")
    repo = Repo(Path.cwd())

    for conf in configs:
        if not conf.exists():
            print("{} config doesn't exist".format(conf.name))
            continue

        shutil.copy(conf.local_path, conf.repo_path)
        repo.git.add(conf.repo_path)
        if commit:
            repo.index.commit("Updated {} config".format(conf.name))
        print("Updated {} config".format(conf.name))

    if not dry:
        print("pushing")
        origin = repo.remote()
        origin.push()


def remote():
    print("We want to update from remote scripts")
    for conf in configs:
        if not conf.exists():
            print("{} config doesn't exist".format(conf.name))
            continue
        shutil.copy(conf.repo_path, conf.local_path)
        print("Updated {} config".format(conf.name))


if __name__ == "__main__":
    main()
